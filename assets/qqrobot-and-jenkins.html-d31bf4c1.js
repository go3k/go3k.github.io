import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as a,c as s,a as e,b as n,e as t,f as i}from"./app-c703f97d.js";const d={},c=i('<p>Jenkins是一个有名的可持续集成工具，使用现有的插件就可以很容易的搭建一个软件自动集成环境。</p><p>Jenkins使用过程中，发现一个常见场景：用Jenkins开始打包，然后马上投入正常工作，接下来就把打包的事情忘记了。这样产生一个问题是不能及时的展开打包的下一步工作；另外的情况下，一直挂记这件事时不时上Jenkins查看编译状态，影响当前的工作。于是我思考一种解决方法：</p><blockquote><p>编译结果直接通知到QQ岂不是很方便？</p></blockquote><p>于是开始在Github有意的关注<code>QQ机器人</code>类似的repo，也从中了解了一些<code>QQ机器人</code>的基本情况。</p><h2 id="qq机器人" tabindex="-1"><a class="header-anchor" href="#qq机器人" aria-hidden="true">#</a> QQ机器人</h2><p>QQ协议并不开放，QQ机器人都是基于破解WebQQ协议实现的。WebQQ协议分为两种：</p><ul><li>WebQQ：早一些，协议破解的已经很完整，并且有不少以此为基础的工具。悲剧的是QQ已经停止WebQQ服务了。</li><li>SmartQQ：正在使用中的QQ协议，工具不多。</li></ul>',7),h={id:"pfqq",tabindex:"-1"},p=e("a",{class:"header-anchor",href:"#pfqq","aria-hidden":"true"},"#",-1),u={href:"https://github.com/sjdy521/pfqq",target:"_blank",rel:"noopener noreferrer"},_=e("p",null,"这是一款非常好用的基于SmartQQ的工具：",-1),b=e("ul",null,[e("li",null,"使用Perl语言编写，插件式的设计结构。"),e("li",null,"QQ基本功能，如：可发送消息到个人和QQ群。"),e("li",null,"提供基于HTTP协议的api接口供其他语言或系统调用的插件。")],-1),f={href:"https://github.com/sjdy521/pfqq",target:"_blank",rel:"noopener noreferrer"},k=e("p",null,"具体使用方法看源码的Demo和Doc说明。",-1),Q=e("p",null,"到这里问题已经解决了一大半，接下来把功能集成到Jenkin就好了。",-1),m=e("h2",{id:"jenkins插件编写",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#jenkins插件编写","aria-hidden":"true"},"#"),n(" Jenkins插件编写")],-1),g=e("p",null,"网上可以找到一些中文资料，但并不面面俱到。官网的文档也相当不友好，关键概念没有点明，看了几遍文档还是一头雾水，只能通过参考现有插件慢慢摸索。下面主要是开发过程中的一些问题记录。",-1),q={href:"https://wiki.jenkins-ci.org/display/JENKINS/Plugin+tutorial#Plugintutorial-TableofContents",target:"_blank",rel:"noopener noreferrer"},j={href:"http://maven.apache.org/",target:"_blank",rel:"noopener noreferrer"},x=e("li",null,[n("把"),e("code",null,"maven/conf/settings.xml"),n("复制到"),e("code",null,"~/.m2/settings.xml"),n("下。")],-1),J=e("li",null,"注意：mvn的操作需要下载各种各样的依赖，而且悲剧的是依赖很可能下载失败，需要尝试翻墙等等各种方法。",-1),y=e("h4",{id:"eclipse下进行插件的开发",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#eclipse下进行插件的开发","aria-hidden":"true"},"#"),n(" Eclipse下进行插件的开发")],-1),v=e("p",null,"开发效率会提升很多，代码提示、编译错误上就可以节约不少时间。执行如下命令：",-1),D=e("pre",null,[e("code",null,`mvn -DdownloadSources=true -DdownloadJavadocs=true -DoutputDirectory=target/eclipse-classes -Declipse.workspace=/path/to/workspace eclipse:eclipse eclipse:add-maven-repo
`)],-1),E=e("blockquote",null,[e("p",null,"Where /path/to/workspace is the path to your Eclipse workspace.")],-1),w={href:"https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+plugin+development+with+Eclipse",target:"_blank",rel:"noopener noreferrer"},N=i('<ul><li>按照要求修改<code>settings.xml</code>，注意不是直接加到文件末尾，要对应XML格式修改settings。</li><li>修改完成后<code>mvn hpi:create</code>即可创建新插件。</li></ul><h3 id="插件结构" tabindex="-1"><a class="header-anchor" href="#插件结构" aria-hidden="true">#</a> 插件结构</h3><ul><li>插件代码结构分两部分：jelly为基础的xml的界面配置、java进行数据绑定和插件功能实现。</li><li>jelly中的field值和java中的构造函数参数名需要一致、jelly的xml结构需要注意。</li></ul><h4 id="关于扩展点" tabindex="-1"><a class="header-anchor" href="#关于扩展点" aria-hidden="true">#</a> 关于扩展点</h4><p>有两个格式的扩展点：</p><ul><li>Singleton Pattern</li><li>Describale/Descriptor Pattern</li></ul><p>我目前对于扩展点理解是：Job配置界面中有很多的分区，界面元素区域和功能对应扩展点类。比如：</p><ul><li>顶部的复选框部分，对应JobProperty</li><li>Build Environment部分，对应BuildWrapper，可以定义环境变量用在后面的阶段</li><li>Build部分(Add build step)，对应Builder，可以定义Build行为</li><li>Builder部分(Add Postbuild action)，对应Notifier，可以定义编译后的行为，如结果通知</li></ul><p>写插件的第一步就是确认扩展点，随着需求的增加会对扩展点有更深入的认识。</p><h4 id="jelly编写" tabindex="-1"><a class="header-anchor" href="#jelly编写" aria-hidden="true">#</a> Jelly编写</h4>',10),S={href:"https://jenkins-ci.org/maven-site/jenkins-core/jelly-taglib-ref.html",target:"_blank",rel:"noopener noreferrer"},B=i(`<p>官方有个Sample UI的插件，可以用来参考学习UI编写。</p><blockquote><p>Dynamic是件非常麻烦的事情。。。搞了半天没搞定，貌似没有动态能力。</p></blockquote><h3 id="debug" tabindex="-1"><a class="header-anchor" href="#debug" aria-hidden="true">#</a> Debug</h3><p>运行下面的命令，执行完成后启动Jenkins，并进入debug模式：</p><pre><code>export MAVEN_OPTS=&quot;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=8000,suspend=n&quot;
mvn hpi:run
</code></pre><p>非常方便，jelly修改后直接刷新即可看到更新。</p><h3 id="依赖外部jar包" tabindex="-1"><a class="header-anchor" href="#依赖外部jar包" aria-hidden="true">#</a> 依赖外部jar包</h3><p>需要将依赖写入pom文件，比较烦的是不容易找到groupid/artifactid等信息。查了一些资料，也有直接安装本地jar包的方法。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>Jenkins插件编写没有想象那么简单，不过结果是好的，最终完成了整个工具。Jenkins插件可以在Job中配置要通知到的个人QQ和QQ群，还有QQ消息内容。在编译机运行pfqq服务，每当编译完成就可以发送消息到QQ了。╮(╯▽╰)╭</p>`,10);function P(T,I){const l=r("ExternalLinkIcon");return a(),s("div",null,[c,e("h3",h,[p,n(),e("a",u,[n("pfqq"),t(l)])]),_,b,e("blockquote",null,[e("p",null,[n("repo地址："),e("a",f,[n("https://github.com/sjdy521/pfqq"),t(l)])])]),k,Q,m,g,e("p",null,[n("官方文档："),e("a",q,[n("Jenkins Tutorial"),t(l)]),n(" 可以参考用来搭建开发环境，简要步骤如下：")]),e("ul",null,[e("li",null,[n("安装"),e("a",j,[n("Maven"),t(l)]),n("，添加环境变量。")]),x,J]),y,v,D,E,e("p",null,[n("下载个半天的依赖，并显示成功后，就可以在Eclipse中导入插件工程了。如果有报错，看 "),e("a",w,[n("TroubleShooting"),t(l)]),n(" 即可。")]),N,e("p",null,[n("可用的tag说明："),e("a",S,[n("Jelly tag Ref"),t(l)])]),B])}const A=o(d,[["render",P],["__file","qqrobot-and-jenkins.html.vue"]]);export{A as default};
